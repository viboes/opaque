# Boost Chrono Library test Jamfile

# Copyright Vicente Botet 2010-2011

# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt

# See library home page at http://www.boost.org/libs/opaque


if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

project
    : requirements

        # uncomment the line above if you build outside a Boost release
        #<include>$(BOOST_ROOT)

        <define>BOOST_ENABLE_WARNINGS
        <define>BOOST_RATIO_USES_MPL_ASSERT
        <warnings>all
        <toolset>gcc:<cxxflags>-Wextra
        <toolset>gcc:<cxxflags>-pedantic
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>darwin:<cxxflags>-Wextra
        <toolset>darwin:<cxxflags>-pedantic
        <toolset>darwin:<cxxflags>-Wno-long-long
        #<toolset>pathscale:<cxxflags>-Wextra
        <toolset>pathscale:<cxxflags>-Wno-long-long
        <toolset>pathscale:<cxxflags>-pedantic
        <toolset>clang:<cxxflags>-Wextra
        <toolset>clang:<cxxflags>-pedantic
        <toolset>clang:<cxxflags>-Wno-long-long
        <toolset>gcc-mingw-4.5.0:<cxxflags>-Wno-missing-field-initializers
        <toolset>gcc-mingw-4.5.0:<cxxflags>-fdiagnostics-show-option
        <toolset>msvc:<cxxflags>/wd4127
    ;

   test-suite "new"
        :
        [ run new_type_test.cpp ]
        [ run new_class_test.cpp ]
        ;

   test-suite "new_class"
        :
        [ run new_class/regular_pass.cpp ]

        [ compile-fail new_class/assign_siblings_fail.cpp ]
        [ compile-fail new_class/assign_up_fail.cpp ]
        [ compile-fail new_class/assign_down_fail.cpp ]
        #[ compile-fail new_class/bad_metamixin_fail.cpp ]
        [ compile-fail new_class/copy_construct_from_non_convertible_fail.cpp ]

        [ run new_class/using_less_than_pass.cpp ]
        [ compile-fail new_class/less_than_fail.cpp ]
        [ compile-fail new_class/hiding_less_than_fail.cpp ]

        [ run new_class/using_less_than_equal_pass.cpp ]
        [ compile-fail new_class/less_than_equal_fail.cpp ]

        [ run new_class/using_greater_than_pass.cpp ]
        [ compile-fail new_class/greater_than_fail.cpp ]

        [ run new_class/using_greater_than_equal_pass.cpp ]
        [ compile-fail new_class/greater_than_equal_fail.cpp ]

        [ run new_class/using_equal_pass.cpp ]
        [ compile-fail new_class/equal_fail.cpp ]

        [ run new_class/using_not_equal_pass.cpp ]
        [ compile-fail new_class/not_equal_fail.cpp ]


        [ run new_class/using_plus_assign_pass.cpp ]
        [ compile-fail new_class/plus_assign_fail.cpp ]

        [ run new_class/using_minus_assign_pass.cpp ]
        [ compile-fail new_class/minus_assign_fail.cpp ]

        [ run new_class/using_multiply_assign_pass.cpp ]
        [ compile-fail new_class/multiply_assign_fail.cpp ]

        [ run new_class/using_plus_pass.cpp ]
        [ compile-fail new_class/plus_fail.cpp ]
        [ compile-fail new_class/hiding_plus_fail.cpp ]

        [ run new_class/using_multiply_pass.cpp ]
        #[ compile-fail new_class/multiply_fail.cpp ]

        [ run new_class/using_divide_pass.cpp ]
        #[ compile-fail new_class/divide_fail.cpp ]

        ;

   test-suite "public"
        :
        [ run public_opaque_test.cpp ]
        [ run multi_level_conversion.cpp ]
        ;

   test-suite "private"
        :
        [ run private_opaque_test.cpp ]
        [ compile-fail private_opaque_explicit_conversion_fail.cpp ]

        ;

   test-suite "compile_fail"
        :
        [ compile-fail add_siblings_fail.cpp ]
        #[ compile-fail assign_siblings_fail.cpp ]
        [ compile-fail add_pub_siblings_fail.cpp ]
        [ compile-fail assign_pub_siblings_fail.cpp ]
        ;


   test-suite "examples"
        :
        [ run ../example/ex1.cpp ]
        [ run ../example/ex2.cpp ]
        [ run ../example/ex3.cpp ]
        [ run ../example/ex4.cpp ]
        [ compile-fail ../example/ex5.cpp ]
        [ compile ../example/ex6.cpp ]
        ;
